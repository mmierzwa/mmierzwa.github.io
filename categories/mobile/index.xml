<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mobile on byteloom - Marek Mierzwa</title><link>https://byteloom.marek-mierzwa.com/categories/mobile/</link><description>Recent content in Mobile on byteloom - Marek Mierzwa</description><generator>Hugo</generator><language>en</language><copyright>Copy, _right?_ :thinking_face:</copyright><lastBuildDate>Sat, 23 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://byteloom.marek-mierzwa.com/categories/mobile/index.xml" rel="self" type="application/rss+xml"/><item><title>Search as you type in Xamarin.Forms - the Reactive Extensions way</title><link>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms-part-2/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms-part-2/</guid><description>&lt;p>In &lt;a href="https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms">my previous post&lt;/a> I showed how to introduce search as type behavior into Xamarin.Forms app with standard &lt;a href="https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/behaviors/" target="_blank" rel="noreferrer">Forms Behaviors&lt;/a>.&lt;/p>
&lt;p>Let&amp;rsquo;s see how to do it in other, more declarative and configurable manner, using &lt;a href="https://github.com/dotnet/reactive" target="_blank" rel="noreferrer">Reactive Extensions (Rx)&lt;/a> instead of &lt;code>Task&lt;/code> and &lt;code>CancellationTokenSource&lt;/code>.&lt;/p></description></item><item><title>Implementing search as type in Xamarin.Forms search bar</title><link>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms/</link><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms/</guid><description>&lt;p>Search as type functionality is quite often seen on the web as well as in mobile apps. Let&amp;rsquo;s see how to make it work in Xamarin.Forms.&lt;/p></description></item><item><title>How to detect screen keyboard appearance changes</title><link>https://byteloom.marek-mierzwa.com/blog/detecting-on-screen-keyboard-toggle/</link><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/detecting-on-screen-keyboard-toggle/</guid><description>&lt;p>Detecting on-screen keyboard toggles and proper handling of such changes can be quite tricky. Android tries to deal with those events on its own but its behavior is often far from perfect. iOS, on the other hand, leaves all the work to an app developer. Both approaches have its advantages and disadvantages but sooner or later each mobile app dev will have to face this problem.&lt;/p></description></item><item><title>Setting tint color in Xamarin.Form image</title><link>https://byteloom.marek-mierzwa.com/blog/setting-tint-color-in-xamarin-form-image/</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/setting-tint-color-in-xamarin-form-image/</guid><description>&lt;p>Today&amp;rsquo;s mobile apps are rarely created as text-only. Most of them needs at least in-app icons for toolbars. In many cases you can find graphics for mobile platforms as ready to use resources on the Internet, i.e. &lt;a href="https://material.io/icons/" target="_blank" rel="noreferrer">Material Design icons&lt;/a>. Sometimes they are prepared by graphic designers specially for your apps.&lt;/p></description></item><item><title>Enterprise patterns for configuration in Xamarin app. Part 3: Versioning and keeping secrets secret</title><link>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-3/</link><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-3/</guid><description>&lt;p>It&amp;rsquo;s very common to have multiple versions of the app during development - i.e. stable beta and store/production or alpha that contains the latest changes. Managing application configuration for multiple versions might be confusing when it&amp;rsquo;s not carefully designed and setup with the build process.&lt;/p></description></item><item><title>Enterprise patterns for configuration in Xamarin app. Part 2: Managing dependencies</title><link>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-2/</link><pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-2/</guid><description>&lt;p>In &lt;a href="https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-1">last post&lt;/a> I described how to cope, in some extent, with different pace of delivering mobile app versus it&amp;rsquo;s supporting backend. The article also provided a simple hint for speeding up the mobile app development by introducing mocks instead of the external network services.&lt;/p></description></item><item><title>Enterprise patterns for configuration in Xamarin app. Part 1: Mocking external dependencies</title><link>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-1/</link><pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-1/</guid><description>&lt;p>Modern mobile apps are rarely developed as offline-only. They typically communicate with backend services that feed them with data, keeps in sync with their web equivalents or allows for various external integrations. The backend part is most often developed by different teams in their own pace. The mobile part can be often developed faster thus it waits for the full integration.&lt;/p></description></item><item><title>Object reference not set in Xamarin.Forms XAML compilation</title><link>https://byteloom.marek-mierzwa.com/blog/object-reference-not-set-in-xamarin-forms-xaml-compilation/</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/object-reference-not-set-in-xamarin-forms-xaml-compilation/</guid><description>&lt;p>XAML compilation is (or at least should be) one of the default optimisation steps in Xamarin.Forms app development. It really speeds up the app especially on Android. Sometimes however it can cause some nasty errors like this one:&lt;/p></description></item><item><title>Placeholder text in Xamarin.Forms Editor</title><link>https://byteloom.marek-mierzwa.com/blog/placeholder-text-in-xamarin-forms-editor/</link><pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/placeholder-text-in-xamarin-forms-editor/</guid><description>&lt;p>Standard Xamarin.Forms &lt;a href="https://developer.xamarin.com/api/type/Xamarin.Forms.Editor" target="_blank" rel="noreferrer">Xamarin.Forms.Editor control&lt;/a> offers edit capabilities similar to &lt;code>Entry&lt;/code> but for multiline text. Unfortunately unlike &lt;code>Entry&lt;/code> it doesn&amp;rsquo;t support displaying placeholder text out of the box. Implementing this functionality with custom renderers can be tricky. Let&amp;rsquo;s see how to do this on Android and iOS.&lt;/p></description></item><item><title>Badge icon notification in Xamarin.Forms ToolbarItems on iOS</title><link>https://byteloom.marek-mierzwa.com/blog/badge-icon-notification-in-xamarin-forms-toolbaritems-on-ios/</link><pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/badge-icon-notification-in-xamarin-forms-toolbaritems-on-ios/</guid><description>&lt;p>Most of iPhone and iPad users can easily recognize icon badges - the pattern for application notifications typically presented in app icon or navigation bar. People that got used to this pattern might want to have the same user experience in their Xamarin Forms application. This post describes how to customize the navigation toolbar in iOS to dynamically display such elements.&lt;/p></description></item><item><title>Tappable label in Xamarin.Forms</title><link>https://byteloom.marek-mierzwa.com/blog/tappable-label-in-xamarin-forms/</link><pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/tappable-label-in-xamarin-forms/</guid><description>&lt;p>Adding tap/click handling to Xamarin.Forms Label is fairly easy. You can do it both in XAML or code behind using &lt;code>GesureRecognizers&lt;/code> collection like it is &lt;a href="https://developer.xamarin.com/guides/xamarin-forms/application-fundamentals/gestures/tap/" target="_blank" rel="noreferrer">described in this recipe&lt;/a>. Unfortunately if you plan to use this solution intensively in your app it will add quite a lot of repeatable code for setting up those handlers (especially in XAML)&lt;/p></description></item><item><title>Cleaning ADAL token cache on Android and iOS</title><link>https://byteloom.marek-mierzwa.com/blog/cleaning-adal-token-cache/</link><pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cleaning-adal-token-cache/</guid><description>&lt;p>Microsoft &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-authentication-libraries" target="_blank" rel="noreferrer">Azure Active Directory Authentication Libraries&lt;/a> (ADAL) is a popular set wrapper around &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/" target="_blank" rel="noreferrer">Azure Active Directory&lt;/a> API distributed in the form of platform and language specific components. It&amp;rsquo;s especially useful in multi-platform applications that integrate with various AD APIs such as Outlook or Graph API. It not only wraps the oAuth endpoints but automates the entire application flow for retrieving, refreshing and persisting tokens.&lt;/p></description></item><item><title>Disabled button style on iOS in Xamarin.Forms</title><link>https://byteloom.marek-mierzwa.com/blog/disabled-button-style-on-ios-in-xamarin-forms/</link><pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/disabled-button-style-on-ios-in-xamarin-forms/</guid><description>&lt;p>All the credits for solution described in this post goes &lt;a href="https://www.facebook.com/qbus00" target="_blank" rel="noreferrer">my friend qbus&lt;/a>. He saved few hours of my life and my sanity ;-)&lt;/p></description></item><item><title>ModernHttpClient and 'Type HttpClientHandler defined in unreferenced assembly' error</title><link>https://byteloom.marek-mierzwa.com/blog/cannot-find-referenced-system-net-http-httpclienthandler/</link><pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cannot-find-referenced-system-net-http-httpclienthandler/</guid><description>&lt;p>&lt;a href="https://github.com/paulcbetts/ModernHttpClient" target="_blank" rel="noreferrer">ModernHttpClient&lt;/a> is a great wrapper around native HTTP clients offered by Xamarin. It wraps &lt;code>NSURLSession&lt;/code> on iOS and &lt;code>OkHttp&lt;/code> on Android. As it deals pretty well with SSL/TLS stack (especially in uncommon scenarios) it&amp;rsquo;s often used instead of built-in types. I switched to &lt;code>ModernHttpClient&lt;/code> because of weird errors on connections to the preproduction environment in Android.&lt;/p></description></item><item><title>How to setup Ninject as the default DI container in MvvmCross?</title><link>https://byteloom.marek-mierzwa.com/blog/how-to-setup-ninject-as-the-default-di-container-in-mvvmcross/</link><pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/how-to-setup-ninject-as-the-default-di-container-in-mvvmcross/</guid><description>&lt;p>When you build a multi-platform application in .NET, especially for the mobile, you typically choose between two approaches. One is to code the shared UI layer commonly with Xamarin.Forms (you will still need to have some parts to be placed in platform projects, like custom renderers or providers). The second is to put the entire UI code in platform-specific projects. In this approach you can use the full power of each platform features (like fragments on Android). Both solutions allow for sharing common business logic between all the platforms. On the other hand full implementation of MVVM pattern in the second approach can be tricky and time consuming. The solution is to use 3rd party library; and here comes the MvvmCross. It covers many more areas than the pure MVVM pattern:&lt;/p></description></item><item><title>Error executing task BuildApk: packaged_resources does not exist</title><link>https://byteloom.marek-mierzwa.com/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</guid><description>&lt;p>Have you ever encountered an error: &lt;code>Error executing task BuildApk: .../bin/packaged_resources does not exist&lt;/code>? If so you probably know that solving this issue can be sometimes quite tricky. It may be hard to track when and where the true bug was introduced in the code base. Although some suggestions can be &lt;a href="https://forums.xamarin.com/discussion/63356/the-file-obj-debug-android-bin-packaged-resources-does-not-exist" target="_blank" rel="noreferrer">found on the Xamarin Forum&lt;/a> the solution usually differ case by case.&lt;/p></description></item><item><title>AppCompat support in MVVMCross Android splash screen</title><link>https://byteloom.marek-mierzwa.com/blog/appcompat-support-in-mvvmcross-android-splash-screen/</link><pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/appcompat-support-in-mvvmcross-android-splash-screen/</guid><description>&lt;p>As it&amp;rsquo;s mentioned in &lt;a href="https://www.mvvmcross.com/documentation/fundamentals/navigation/navigation.html" target="_blank" rel="noreferrer">MVVMCross documentation&lt;/a> Android is quite specific in terms of navigation requirements. The entry point is statically indicated by &lt;code>MainLauncher = true&lt;/code> attribute parameter on the activity. On rest of the platforms, specifically on iOS, this can be done dynamically by implementing &lt;code>IMvxAppStart&lt;/code> class for registration in &lt;code>MvxApplication.Initialize()&lt;/code>.&lt;/p></description></item><item><title>Xamarin.Android - Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</title><link>https://byteloom.marek-mierzwa.com/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</guid><description>&lt;p>An error &lt;code>Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED&lt;/code> appears from &lt;a href="http://stackoverflow.com/questions/37066617/failure-install-parse-failed-manifest-malformed" target="_blank" rel="noreferrer">time to time&lt;/a> in world of Android Java developers. However among Xamarin devs it seems to appear much rarely. Today I came across one and the standard Android solution did not work for me. Curious about the solution I found (&lt;a href="https://www.youtube.com/watch?v=nCrlyX6XbTU" target="_blank" rel="noreferrer">with a little help of my friends&lt;/a>)?&lt;/p></description></item><item><title>AAPT: Unknown option '--no-version-vectors'</title><link>https://byteloom.marek-mierzwa.com/blog/aapt-unknown-option-no-version-vectors/</link><pubDate>Tue, 04 Apr 2017 22:56:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/aapt-unknown-option-no-version-vectors/</guid><description>&lt;p>If you ever encountered the error &lt;code>AAPT: Unknown option '--no-version-vectors'&lt;/code> during the Xamarin build you probably found &lt;a href="https://forums.xamarin.com/discussion/63482/aapt-error-unknown-option-no-version-vectors" target="_blank" rel="noreferrer">this page&lt;/a> looking for a solution. Like I did. Then you probably first tried setting &lt;code>AndroidSdkBuildToolsVersion&lt;/code> to the latest you have. Just like me. Or uninstall all the older versions. If this didn&amp;rsquo;t work (like in my case) stay with me.&lt;/p></description></item><item><title>Why ADAL does not persist user credentials on iOS simulator?</title><link>https://byteloom.marek-mierzwa.com/blog/non-persistent-keychain-on-ios-simulator/</link><pubDate>Mon, 20 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/non-persistent-keychain-on-ios-simulator/</guid><description>&lt;p>If you are using Azure Active Directory services you probably at least considered using &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-authentication-libraries" target="_blank" rel="noreferrer">ADAL&lt;/a> as a client library in you application. It&amp;rsquo;s easy to setup, use and it offers a unified API across the most popular platforms - iOS, Android, UWP, web - both .Net and native. Unfortunately sometimes things just does not work out of the box without deeper understanding how some features are implemented. This post is about one of them - credentials cache persistency on iOS.&lt;/p></description></item><item><title>Why does MVVMCross view model initialize twice on iOS?</title><link>https://byteloom.marek-mierzwa.com/blog/why-mvvmcross-vm-init-twice-on-ios/</link><pubDate>Thu, 16 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/why-mvvmcross-vm-init-twice-on-ios/</guid><description>&lt;p>Working on a bug fix in MVVMCross-based mobile application I noticed a strange behavior. The navigation to other view model I put in &lt;code>async Init&amp;lt;TInit&amp;gt;(TInit parameters)&lt;/code> which as executed on the first view model in my app was running twice. After a short debugging session it turned out that &lt;code>MvxViewModel&amp;lt;TInit&amp;gt;&lt;/code> &lt;code>Init()&lt;/code> is called from the view controllers &lt;code>ViewDidLoad()&lt;/code> method. Obviously there was something I was missing in terms of &lt;code>ViewDidLoad()&lt;/code> semantics.&lt;/p></description></item><item><title>Detecting device resolution in Xamarin apps</title><link>https://byteloom.marek-mierzwa.com/blog/cross-platform-resolution-detection/</link><pubDate>Sat, 11 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cross-platform-resolution-detection/</guid><description>&lt;p>Considering Xamarin there can be many reasons for need of screen resolution detection in mobile app. You may have more complex logic of loading your resources possibly split between PCL and Android/iOS projects. Other might want to send this information with REST request for reporting. Whatever your reason is, here is a very short text on how to do it in IoC-friendly way.&lt;/p></description></item><item><title>How to add padding to UILabel in Xamain.iOS</title><link>https://byteloom.marek-mierzwa.com/blog/xamarin-is-uilabel-with-padding/</link><pubDate>Mon, 20 Feb 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/xamarin-is-uilabel-with-padding/</guid><description>&lt;p>Working with mobile can be quite challenging for a developer with a web dev background. At least that is my experience so far. Comparing to typical HTML web elements with CSS styling some features might be missing.&lt;/p></description></item></channel></rss>