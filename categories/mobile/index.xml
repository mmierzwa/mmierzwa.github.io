<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mobile on byteloom - Marek Mierzwa</title><link>https://byteloom.marek-mierzwa.com/categories/mobile/</link><description>Recent content in mobile on byteloom - Marek Mierzwa</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copy, _right?_ :thinking_face:</copyright><lastBuildDate>Sat, 23 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://byteloom.marek-mierzwa.com/categories/mobile/index.xml" rel="self" type="application/rss+xml"/><item><title>Search as you type in Xamarin.Forms - the Reactive Extensions way</title><link>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms-part-2/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms-part-2/</guid><description>In my previous post I showed how to introduce search as type behavior into Xamarin.Forms app with standard Forms Behaviors.</description></item><item><title>Implementing search as type in Xamarin.Forms search bar</title><link>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms/</link><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms/</guid><description>Search as type functionality is quite often seen on the web as well as in mobile apps. Let&amp;rsquo;s see how to make it work in Xamarin.</description></item><item><title>How to detect screen keyboard appearance changes</title><link>https://byteloom.marek-mierzwa.com/blog/detecting-on-screen-keyboard-toggle/</link><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/detecting-on-screen-keyboard-toggle/</guid><description>Detecting on-screen keyboard toggles and proper handling of such changes can be quite tricky. Android tries to deal with those events on its own but its behavior is often far from perfect.</description></item><item><title>Setting tint color in Xamarin.Form image</title><link>https://byteloom.marek-mierzwa.com/blog/setting-tint-color-in-xamarin-form-image/</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/setting-tint-color-in-xamarin-form-image/</guid><description>Today&amp;rsquo;s mobile apps are rarely created as text-only. Most of them needs at least in-app icons for toolbars. In many cases you can find graphics for mobile platforms as ready to use resources on the Internet, i.</description></item><item><title>Enterprise patterns for configuration in Xamarin app. Part 3: Versioning and keeping secrets secret</title><link>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-3/</link><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-3/</guid><description>It&amp;rsquo;s very common to have multiple versions of the app during development - i.e. stable beta and store/production or alpha that contains the latest changes.</description></item><item><title>Enterprise patterns for configuration in Xamarin app. Part 2: Managing dependencies</title><link>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-2/</link><pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-2/</guid><description>In last post I described how to cope, in some extent, with different pace of delivering mobile app versus it&amp;rsquo;s supporting backend.</description></item><item><title>Enterprise patterns for configuration in Xamarin app. Part 1: Mocking external dependencies</title><link>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-1/</link><pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/enterprise-patterns-for-configuration-in-xamarin-app-part-1/</guid><description>Modern mobile apps are rarely developed as offline-only. They typically communicate with backend services that feed them with data, keeps in sync with their web equivalents or allows for various external integrations.</description></item><item><title>Object reference not set in Xamarin.Forms XAML compilation</title><link>https://byteloom.marek-mierzwa.com/blog/object-reference-not-set-in-xamarin-forms-xaml-compilation/</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/object-reference-not-set-in-xamarin-forms-xaml-compilation/</guid><description>XAML compilation is (or at least should be) one of the default optimisation steps in Xamarin.Forms app development. It really speeds up the app especially on Android.</description></item><item><title>Placeholder text in Xamarin.Forms Editor</title><link>https://byteloom.marek-mierzwa.com/blog/placeholder-text-in-xamarin-forms-editor/</link><pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/placeholder-text-in-xamarin-forms-editor/</guid><description>Standard Xamarin.Forms Xamarin.Forms.Editor control offers edit capabilities similar to Entry but for multiline text. Unfortunately unlike Entry it doesn&amp;rsquo;t support displaying placeholder text out of the box.</description></item><item><title>Badge icon notification in Xamarin.Forms ToolbarItems on iOS</title><link>https://byteloom.marek-mierzwa.com/blog/badge-icon-notification-in-xamarin-forms-toolbaritems-on-ios/</link><pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/badge-icon-notification-in-xamarin-forms-toolbaritems-on-ios/</guid><description>Most of iPhone and iPad users can easily recognize icon badges - the pattern for application notifications typically presented in app icon or navigation bar.</description></item><item><title>Tappable label in Xamarin.Forms</title><link>https://byteloom.marek-mierzwa.com/blog/tappable-label-in-xamarin-forms/</link><pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/tappable-label-in-xamarin-forms/</guid><description>Adding tap/click handling to Xamarin.Forms Label is fairly easy. You can do it both in XAML or code behind using GesureRecognizers collection like it is described in this recipe.</description></item><item><title>Cleaning ADAL token cache on Android and iOS</title><link>https://byteloom.marek-mierzwa.com/blog/cleaning-adal-token-cache/</link><pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cleaning-adal-token-cache/</guid><description>Microsoft Azure Active Directory Authentication Libraries (ADAL) is a popular set wrapper around Azure Active Directory API distributed in the form of platform and language specific components.</description></item><item><title>Disabled button style on iOS in Xamarin.Forms</title><link>https://byteloom.marek-mierzwa.com/blog/disabled-button-style-on-ios-in-xamarin-forms/</link><pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/disabled-button-style-on-ios-in-xamarin-forms/</guid><description>All the credits for solution described in this post goes my friend qbus. He saved few hours of my life and my sanity ;-)</description></item><item><title>ModernHttpClient and 'Type HttpClientHandler defined in unreferenced assembly' error</title><link>https://byteloom.marek-mierzwa.com/blog/cannot-find-referenced-system-net-http-httpclienthandler/</link><pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cannot-find-referenced-system-net-http-httpclienthandler/</guid><description>ModernHttpClient is a great wrapper around native HTTP clients offered by Xamarin. It wraps NSURLSession on iOS and OkHttp on Android.</description></item><item><title>How to setup Ninject as the default DI container in MvvmCross?</title><link>https://byteloom.marek-mierzwa.com/blog/how-to-setup-ninject-as-the-default-di-container-in-mvvmcross/</link><pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/how-to-setup-ninject-as-the-default-di-container-in-mvvmcross/</guid><description>When you build a multi-platform application in .NET, especially for the mobile, you typically choose between two approaches. One is to code the shared UI layer commonly with Xamarin.</description></item><item><title>Error executing task BuildApk: packaged_resources does not exist</title><link>https://byteloom.marek-mierzwa.com/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</guid><description>Have you ever encountered an error: Error executing task BuildApk: .../bin/packaged_resources does not exist? If so you probably know that solving this issue can be sometimes quite tricky.</description></item><item><title>AppCompat support in MVVMCross Android splash screen</title><link>https://byteloom.marek-mierzwa.com/blog/appcompat-support-in-mvvmcross-android-splash-screen/</link><pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/appcompat-support-in-mvvmcross-android-splash-screen/</guid><description>As it&amp;rsquo;s mentioned in MVVMCross documentation Android is quite specific in terms of navigation requirements. The entry point is statically indicated by MainLauncher = true attribute parameter on the activity.</description></item><item><title>Xamarin.Android - Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</title><link>https://byteloom.marek-mierzwa.com/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</guid><description>An error Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED appears from time to time in world of Android Java developers. However among Xamarin devs it seems to appear much rarely.</description></item><item><title>AAPT: Unknown option '--no-version-vectors'</title><link>https://byteloom.marek-mierzwa.com/blog/aapt-unknown-option-no-version-vectors/</link><pubDate>Tue, 04 Apr 2017 22:56:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/aapt-unknown-option-no-version-vectors/</guid><description>If you ever encountered the error AAPT: Unknown option '--no-version-vectors' during the Xamarin build you probably found this page looking for a solution.</description></item><item><title>Why ADAL does not persist user credentials on iOS simulator?</title><link>https://byteloom.marek-mierzwa.com/blog/non-persistent-keychain-on-ios-simulator/</link><pubDate>Mon, 20 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/non-persistent-keychain-on-ios-simulator/</guid><description>If you are using Azure Active Directory services you probably at least considered using ADAL as a client library in you application.</description></item><item><title>Why does MVVMCross view model initialize twice on iOS?</title><link>https://byteloom.marek-mierzwa.com/blog/why-mvvmcross-vm-init-twice-on-ios/</link><pubDate>Thu, 16 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/why-mvvmcross-vm-init-twice-on-ios/</guid><description>Working on a bug fix in MVVMCross-based mobile application I noticed a strange behavior. The navigation to other view model I put in async Init&amp;lt;TInit&amp;gt;(TInit parameters) which as executed on the first view model in my app was running twice.</description></item><item><title>Detecting device resolution in Xamarin apps</title><link>https://byteloom.marek-mierzwa.com/blog/cross-platform-resolution-detection/</link><pubDate>Sat, 11 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cross-platform-resolution-detection/</guid><description>Considering Xamarin there can be many reasons for need of screen resolution detection in mobile app. You may have more complex logic of loading your resources possibly split between PCL and Android/iOS projects.</description></item><item><title>How to add padding to UILabel in Xamain.iOS</title><link>https://byteloom.marek-mierzwa.com/blog/xamarin-is-uilabel-with-padding/</link><pubDate>Mon, 20 Feb 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/xamarin-is-uilabel-with-padding/</guid><description>Working with mobile can be quite challenging for a developer with a web dev background. At least that is my experience so far.</description></item></channel></rss>