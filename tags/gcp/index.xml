<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gcp on byteloom - Marek Mierzwa</title><link>https://byteloom.marek-mierzwa.com/tags/gcp/</link><description>Recent content in Gcp on byteloom - Marek Mierzwa</description><generator>Hugo</generator><language>en</language><copyright>Copy, _right?_ :thinking_face:</copyright><lastBuildDate>Sat, 15 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://byteloom.marek-mierzwa.com/tags/gcp/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing integration with GCS in Go</title><link>https://byteloom.marek-mierzwa.com/blog/integration-testing-with-gcs-in-go/</link><pubDate>Sat, 15 Feb 2025 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/integration-testing-with-gcs-in-go/</guid><description>&lt;p>As I wrote &lt;a href="https://byteloom.marek-mierzwa.com/blog/do-we-still-need-testing-pyramid">in my previous post&lt;/a>, I have a strong preference towards automated acceptance testing on a service-level. So, when I recently faced a need of creating a Go API related to file management that uses GCS as a storage, I started looking for some way to test it this way. Unfortunately, Google doesn&amp;rsquo;t provide any simulator for GCS similar and there is also no the-one-to-rule-them-all tool such as Localstack, which I&amp;rsquo;ve been successfully using for years working with AWS services. I found &lt;a href="https://github.com/fsouza/fake-gcs-server" target="_blank" rel="noreferrer">&lt;code>fsouza/fake-gcs-server&lt;/code>&lt;/a> good enough and quite popular, so I started with that. Although, there are &lt;a href="https://github.com/fsouza/fake-gcs-server/blob/c4a13e7a656207272288bc913bcc99f3784e2bb1/examples/go/main.go" target="_blank" rel="noreferrer">some samples&lt;/a> in the project itself and a couple of blog posts how to start using it, I had to solve a couple of issues, which I think can be interesting, if you&amp;rsquo;re working with this tool in your Go application.&lt;/p></description></item></channel></rss>