<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xamarin on byteloom - Marek Mierzwa</title><link>https://byteloom.marek-mierzwa.com/tags/xamarin/</link><description>Recent content in Xamarin on byteloom - Marek Mierzwa</description><generator>Hugo</generator><language>en</language><copyright>Copy, _right?_ :thinking_face:</copyright><lastBuildDate>Sat, 23 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://byteloom.marek-mierzwa.com/tags/xamarin/index.xml" rel="self" type="application/rss+xml"/><item><title>Search as you type in Xamarin.Forms - the Reactive Extensions way</title><link>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms-part-2/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms-part-2/</guid><description>&lt;p>In &lt;a href="https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms">my previous post&lt;/a> I showed how to introduce search as type behavior into Xamarin.Forms app with standard &lt;a href="https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/behaviors/" target="_blank" rel="noreferrer">Forms Behaviors&lt;/a>.&lt;/p>
&lt;p>Let&amp;rsquo;s see how to do it in other, more declarative and configurable manner, using &lt;a href="https://github.com/dotnet/reactive" target="_blank" rel="noreferrer">Reactive Extensions (Rx)&lt;/a> instead of &lt;code>Task&lt;/code> and &lt;code>CancellationTokenSource&lt;/code>.&lt;/p></description></item><item><title>Implementing search as type in Xamarin.Forms search bar</title><link>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms/</link><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/search-as-you-type-in-xamarin-forms/</guid><description>&lt;p>Search as type functionality is quite often seen on the web as well as in mobile apps. Let&amp;rsquo;s see how to make it work in Xamarin.Forms.&lt;/p></description></item><item><title>Disabled button style on iOS in Xamarin.Forms</title><link>https://byteloom.marek-mierzwa.com/blog/disabled-button-style-on-ios-in-xamarin-forms/</link><pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/disabled-button-style-on-ios-in-xamarin-forms/</guid><description>&lt;p>All the credits for solution described in this post goes &lt;a href="https://www.facebook.com/qbus00" target="_blank" rel="noreferrer">my friend qbus&lt;/a>. He saved few hours of my life and my sanity ;-)&lt;/p></description></item><item><title>ModernHttpClient and 'Type HttpClientHandler defined in unreferenced assembly' error</title><link>https://byteloom.marek-mierzwa.com/blog/cannot-find-referenced-system-net-http-httpclienthandler/</link><pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cannot-find-referenced-system-net-http-httpclienthandler/</guid><description>&lt;p>&lt;a href="https://github.com/paulcbetts/ModernHttpClient" target="_blank" rel="noreferrer">ModernHttpClient&lt;/a> is a great wrapper around native HTTP clients offered by Xamarin. It wraps &lt;code>NSURLSession&lt;/code> on iOS and &lt;code>OkHttp&lt;/code> on Android. As it deals pretty well with SSL/TLS stack (especially in uncommon scenarios) it&amp;rsquo;s often used instead of built-in types. I switched to &lt;code>ModernHttpClient&lt;/code> because of weird errors on connections to the preproduction environment in Android.&lt;/p></description></item><item><title>Error executing task BuildApk: packaged_resources does not exist</title><link>https://byteloom.marek-mierzwa.com/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</guid><description>&lt;p>Have you ever encountered an error: &lt;code>Error executing task BuildApk: .../bin/packaged_resources does not exist&lt;/code>? If so you probably know that solving this issue can be sometimes quite tricky. It may be hard to track when and where the true bug was introduced in the code base. Although some suggestions can be &lt;a href="https://forums.xamarin.com/discussion/63356/the-file-obj-debug-android-bin-packaged-resources-does-not-exist" target="_blank" rel="noreferrer">found on the Xamarin Forum&lt;/a> the solution usually differ case by case.&lt;/p></description></item><item><title>Xamarin.Android - Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</title><link>https://byteloom.marek-mierzwa.com/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</guid><description>&lt;p>An error &lt;code>Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED&lt;/code> appears from &lt;a href="http://stackoverflow.com/questions/37066617/failure-install-parse-failed-manifest-malformed" target="_blank" rel="noreferrer">time to time&lt;/a> in world of Android Java developers. However among Xamarin devs it seems to appear much rarely. Today I came across one and the standard Android solution did not work for me. Curious about the solution I found (&lt;a href="https://www.youtube.com/watch?v=nCrlyX6XbTU" target="_blank" rel="noreferrer">with a little help of my friends&lt;/a>)?&lt;/p></description></item><item><title>AAPT: Unknown option '--no-version-vectors'</title><link>https://byteloom.marek-mierzwa.com/blog/aapt-unknown-option-no-version-vectors/</link><pubDate>Tue, 04 Apr 2017 22:56:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/aapt-unknown-option-no-version-vectors/</guid><description>&lt;p>If you ever encountered the error &lt;code>AAPT: Unknown option '--no-version-vectors'&lt;/code> during the Xamarin build you probably found &lt;a href="https://forums.xamarin.com/discussion/63482/aapt-error-unknown-option-no-version-vectors" target="_blank" rel="noreferrer">this page&lt;/a> looking for a solution. Like I did. Then you probably first tried setting &lt;code>AndroidSdkBuildToolsVersion&lt;/code> to the latest you have. Just like me. Or uninstall all the older versions. If this didn&amp;rsquo;t work (like in my case) stay with me.&lt;/p></description></item><item><title>Why ADAL does not persist user credentials on iOS simulator?</title><link>https://byteloom.marek-mierzwa.com/blog/non-persistent-keychain-on-ios-simulator/</link><pubDate>Mon, 20 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/non-persistent-keychain-on-ios-simulator/</guid><description>&lt;p>If you are using Azure Active Directory services you probably at least considered using &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-authentication-libraries" target="_blank" rel="noreferrer">ADAL&lt;/a> as a client library in you application. It&amp;rsquo;s easy to setup, use and it offers a unified API across the most popular platforms - iOS, Android, UWP, web - both .Net and native. Unfortunately sometimes things just does not work out of the box without deeper understanding how some features are implemented. This post is about one of them - credentials cache persistency on iOS.&lt;/p></description></item><item><title>Why does MVVMCross view model initialize twice on iOS?</title><link>https://byteloom.marek-mierzwa.com/blog/why-mvvmcross-vm-init-twice-on-ios/</link><pubDate>Thu, 16 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/why-mvvmcross-vm-init-twice-on-ios/</guid><description>&lt;p>Working on a bug fix in MVVMCross-based mobile application I noticed a strange behavior. The navigation to other view model I put in &lt;code>async Init&amp;lt;TInit&amp;gt;(TInit parameters)&lt;/code> which as executed on the first view model in my app was running twice. After a short debugging session it turned out that &lt;code>MvxViewModel&amp;lt;TInit&amp;gt;&lt;/code> &lt;code>Init()&lt;/code> is called from the view controllers &lt;code>ViewDidLoad()&lt;/code> method. Obviously there was something I was missing in terms of &lt;code>ViewDidLoad()&lt;/code> semantics.&lt;/p></description></item><item><title>Detecting device resolution in Xamarin apps</title><link>https://byteloom.marek-mierzwa.com/blog/cross-platform-resolution-detection/</link><pubDate>Sat, 11 Mar 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/cross-platform-resolution-detection/</guid><description>&lt;p>Considering Xamarin there can be many reasons for need of screen resolution detection in mobile app. You may have more complex logic of loading your resources possibly split between PCL and Android/iOS projects. Other might want to send this information with REST request for reporting. Whatever your reason is, here is a very short text on how to do it in IoC-friendly way.&lt;/p></description></item><item><title>How to add padding to UILabel in Xamain.iOS</title><link>https://byteloom.marek-mierzwa.com/blog/xamarin-is-uilabel-with-padding/</link><pubDate>Mon, 20 Feb 2017 18:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/xamarin-is-uilabel-with-padding/</guid><description>&lt;p>Working with mobile can be quite challenging for a developer with a web dev background. At least that is my experience so far. Comparing to typical HTML web elements with CSS styling some features might be missing.&lt;/p></description></item><item><title>Short break</title><link>https://byteloom.marek-mierzwa.com/blog/short-break/</link><pubDate>Mon, 20 Feb 2017 17:00:00 +0000</pubDate><guid>https://byteloom.marek-mierzwa.com/blog/short-break/</guid><description>&lt;p>Those of you who enter this blog from time to time probably noticed that there was not update since 4 months. I hope this will change due to my intensive learning in mobile development area.&lt;/p></description></item></channel></rss>