<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on byteloom - Marek Mierzwa</title>
    <link>http://localhost:1313/tags/android/</link>
    <description>Recent content in Android on byteloom - Marek Mierzwa</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copy, _right?_ :thinking_face:</copyright>
    <lastBuildDate>Sat, 26 May 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to detect screen keyboard appearance changes</title>
      <link>http://localhost:1313/blog/detecting-on-screen-keyboard-toggle/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/detecting-on-screen-keyboard-toggle/</guid>
      <description>&lt;p&gt;Detecting on-screen keyboard toggles and proper handling of such changes can be quite tricky. Android tries to deal with those events on its own but its behavior is often far from perfect. iOS, on the other hand, leaves all the work to an app developer. Both approaches have its advantages and disadvantages but sooner or later each mobile app dev will have to face this problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting tint color in Xamarin.Form image</title>
      <link>http://localhost:1313/blog/setting-tint-color-in-xamarin-form-image/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/setting-tint-color-in-xamarin-form-image/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s mobile apps are rarely created as text-only. Most of them needs at least in-app icons for toolbars. In many cases you can find graphics for mobile platforms as ready to use resources on the Internet, i.e. &lt;a href=&#34;https://material.io/icons/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;Material Design icons&lt;/a&gt;. Sometimes they are prepared by graphic designers specially for your apps.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Placeholder text in Xamarin.Forms Editor</title>
      <link>http://localhost:1313/blog/placeholder-text-in-xamarin-forms-editor/</link>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/placeholder-text-in-xamarin-forms-editor/</guid>
      <description>&lt;p&gt;Standard Xamarin.Forms &lt;a href=&#34;https://developer.xamarin.com/api/type/Xamarin.Forms.Editor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;Xamarin.Forms.Editor control&lt;/a&gt; offers edit capabilities similar to &lt;code&gt;Entry&lt;/code&gt; but for multiline text. Unfortunately unlike &lt;code&gt;Entry&lt;/code&gt; it doesn&amp;rsquo;t support displaying placeholder text out of the box. Implementing this functionality with custom renderers can be tricky. Let&amp;rsquo;s see how to do this on Android and iOS.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cleaning ADAL token cache on Android and iOS</title>
      <link>http://localhost:1313/blog/cleaning-adal-token-cache/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/cleaning-adal-token-cache/</guid>
      <description>&lt;p&gt;Microsoft &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-authentication-libraries&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;Azure Active Directory Authentication Libraries&lt;/a&gt; (ADAL) is a popular set wrapper around &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;Azure Active Directory&lt;/a&gt; API distributed in the form of platform and language specific components. It&amp;rsquo;s especially useful in multi-platform applications that integrate with various AD APIs such as Outlook or Graph API. It not only wraps the oAuth endpoints but automates the entire application flow for retrieving, refreshing and persisting tokens.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to setup Ninject as the default DI container in MvvmCross?</title>
      <link>http://localhost:1313/blog/how-to-setup-ninject-as-the-default-di-container-in-mvvmcross/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/how-to-setup-ninject-as-the-default-di-container-in-mvvmcross/</guid>
      <description>&lt;p&gt;When you build a multi-platform application in .NET, especially for the mobile, you typically choose between two approaches. One is to code the shared UI layer commonly with Xamarin.Forms (you will still need to have some parts to be placed in platform projects, like custom renderers or providers). The second is to put the entire UI code in platform-specific projects. In this approach you can use the full power of each platform features (like fragments on Android). Both solutions allow for sharing common business logic between all the platforms. On the other hand full implementation of MVVM pattern in the second approach can be tricky and time consuming. The solution is to use 3rd party library; and here comes the MvvmCross. It covers many more areas than the pure MVVM pattern:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Error executing task BuildApk: packaged_resources does not exist</title>
      <link>http://localhost:1313/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/error-executing-task-buildapk-packaged-resources-does-not-exist/</guid>
      <description>&lt;p&gt;Have you ever encountered an error: &lt;code&gt;Error executing task BuildApk: .../bin/packaged_resources does not exist&lt;/code&gt;? If so you probably know that solving this issue can be sometimes quite tricky. It may be hard to track when and where the true bug was introduced in the code base. Although some suggestions can be &lt;a href=&#34;https://forums.xamarin.com/discussion/63356/the-file-obj-debug-android-bin-packaged-resources-does-not-exist&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;found on the Xamarin Forum&lt;/a&gt; the solution usually differ case by case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AppCompat support in MVVMCross Android splash screen</title>
      <link>http://localhost:1313/blog/appcompat-support-in-mvvmcross-android-splash-screen/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/appcompat-support-in-mvvmcross-android-splash-screen/</guid>
      <description>&lt;p&gt;As it&amp;rsquo;s mentioned in &lt;a href=&#34;https://www.mvvmcross.com/documentation/fundamentals/navigation/navigation.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;MVVMCross documentation&lt;/a&gt; Android is quite specific in terms of navigation requirements. The entry point is statically indicated by &lt;code&gt;MainLauncher = true&lt;/code&gt; attribute parameter on the activity. On rest of the platforms, specifically on iOS, this can be done dynamically by implementing &lt;code&gt;IMvxAppStart&lt;/code&gt; class for registration in &lt;code&gt;MvxApplication.Initialize()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xamarin.Android - Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</title>
      <link>http://localhost:1313/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/xamarin-android-failure-install-parse-failed-manifest-malformed/</guid>
      <description>&lt;p&gt;An error &lt;code&gt;Failure INSTALL_PARSE_FAILED_MANIFEST_MALFORMED&lt;/code&gt; appears from &lt;a href=&#34;http://stackoverflow.com/questions/37066617/failure-install-parse-failed-manifest-malformed&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;time to time&lt;/a&gt; in world of Android Java developers. However among Xamarin devs it seems to appear much rarely. Today I came across one and the standard Android solution did not work for me. Curious about the solution I found (&lt;a href=&#34;https://www.youtube.com/watch?v=nCrlyX6XbTU&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;with a little help of my friends&lt;/a&gt;)?&lt;/p&gt;</description>
    </item>
    <item>
      <title>AAPT: Unknown option &#39;--no-version-vectors&#39;</title>
      <link>http://localhost:1313/blog/aapt-unknown-option-no-version-vectors/</link>
      <pubDate>Tue, 04 Apr 2017 22:56:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/aapt-unknown-option-no-version-vectors/</guid>
      <description>&lt;p&gt;If you ever encountered the error &lt;code&gt;AAPT: Unknown option &#39;--no-version-vectors&#39;&lt;/code&gt; during the Xamarin build you probably found &lt;a href=&#34;https://forums.xamarin.com/discussion/63482/aapt-error-unknown-option-no-version-vectors&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;this page&lt;/a&gt; looking for a solution. Like I did. Then you probably first tried setting &lt;code&gt;AndroidSdkBuildToolsVersion&lt;/code&gt; to the latest you have. Just like me. Or uninstall all the older versions. If this didn&amp;rsquo;t work (like in my case) stay with me.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
